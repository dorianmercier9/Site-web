{
  "hash": "9650af45eb0a6c2d539112c21443e45a",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Types de données\n---\n\n\n\n\n\n![Types de données en Python](https://cdn.educba.com/academy/wp-content/uploads/2019/09/Python-Variable-Types.png)\n\n\nLes types de données en Python classent les données et déterminent les opérations autorisées.\n\n- Données **numériques** : les entiers, les flottants et les nombres complexes.\n- Données **booléennes**, deux valeurs : Vrai et Faux.\n- Données **séquentielles** : les chaînes, les listes et les tuples.\n    - Les *chaînes* de caractères sont indexées, l'indexation commençant à 0. Elles peuvent être placées entre guillemets simples, doubles ou triples.\n    - Les *listes* stockent plusieurs valeurs, séparées par des virgules, et peuvent contenir différents types de données.\n\n\n    - Les *tuples* sont similaires aux listes mais sont immuables, ce qui signifie qu'ils ne peuvent pas être modifiés après leur création.\n    - Les *ensembles* sont des collections non ordonnées de valeurs uniques et sont utiles pour la recherche de valeurs uniques et les opérations sur les ensembles.\n    - Les *dictionnaires* reposent sur des paires clé-valeur pour stocker des données, et les valeurs sont accessibles à l'aide des clés. Les *dictionnaires* sont mutables, autorisant les mises à jour et les suppressions.\n    [](https://user.oc-static.com/upload/2023/04/29/16827780421019_image9.png)]()\n\n\n```{.python}\n# entier\ntype(-10 + 50)\n```\nint\n\n```{.python}\n# float\ntype(-10 + 50.4)\n```\nfloat\n\n```{.python}\n# complexe ! fonctionne que avec j pas i !\ntype(10+ 3j)\n```\ncomplex\n\n```{.python}\ntype(False)\ntype(True)\ntype(2>5)\n2> 5\n2<5\n2 == 2\n```\nbool\n\n```{.python}\n# chaines\n'Simple'\n\"Double\"\nligneMultiple = \"\"\"\nPour la rédaction d'une chaine de caractére sur \nplusieurs lignes\n\"\"\"\nprint(ligneMultiple)\ntype(ligneMultiple)\n```\nPour la rédaction d'une chaine de caractére sur \nplusieurs lignes\n\nstr\n\n```{.python}\n# Attention : utiliser une double quote lorsque qu'il y a des apostrophes dans une phrase\n# print('J'ai 15 ans')\nprint(\"J'ai faim\")\n```\n\n```{.python}\n# Attention : utiliser une double quote lorsque qu'il y a des apostrophes dans une phrase\n# print('J'ai 15 ans')\nprint(\"J'ai faim\")\n```\n\n```{.python}\na =  \"Bonjour Paris\"\nprint(a[0:6])\nprint(a[-3]) # a l'inverse\nprint(a[2:5])\n```\nBonjour\nr\nnjour\n\n```{.python}\na*3\n```\nBonjour ParisBonjour ParisBonjour Paris \n\n```{.python}\na+ '  ' +a\n```\nBonjour Paris  Bonjour Paris\n\n```{.python}\n# liste : on peut tout mettre dans une liste\n[1, 2, 3]\n[\"Pates\", 3, \"Fourchettes\", True, [\"a\", \"b\"]]\n```\n['Pates', 3, 'Fourchettes', True, ['a', 'b']]\n\n```{.python}\n# Ajout\npates = [\"Bolognaise\", \"Carbonara\", \"Pesto\"]\npates.append(\"Nature\")\npates\n```\n['Bolognaise', 'Carbonara', 'Pesto', 'Nature']\n\n```{.python}\n# Ajout\n#changer l'ordre\npates[0] = \"Nature\"\npates[3] = \"Carbonara\"\npates\n```\n['Pistache', 'Chocolat', 'Fraise', 'Vanille']\n\n```{.python}\nlistList = [\"Pates\", 3, \"Fourchettes\", True, [\"a\", \"b\"]] # nested list\nlistList[4]\nlistList[4][1]\n```\n'b'\n\n```{.python}\ntest = [1,4, 90]\ntest.remove(1)\ntest.append(34)\nhelp(list) # toutes les méthodes\n```\nHelp on class list in module builtins:\n\nclass list(object)\n |  list(iterable=(), /)\n |\n |  Built-in mutable sequence.\n |\n |  If no argument is given, the constructor creates a new empty list.\n |  The argument must be an iterable if specified.\n |\n |  Methods defined here:\n |\n |  __add__(self, value, /)\n |      Return self+value.\n |\n |  __contains__(self, key, /)\n |      Return bool(key in self).\n |\n |  __delitem__(self, key, /)\n |      Delete self[key].\n |\n |  __eq__(self, value, /)\n |      Return self==value.\n |\n |  __ge__(self, value, /)\n...\n|  Data and other attributes defined here:\n |\n |  __hash__ = None\n\n\n```{.python}\n# longueur d'une liste\nlen(test)\n```\n3\n\n```{.python}\n# tuple : ne change jamais (data pour ce qui ne change jamais)\nexempleTuple = (1, 2, 3, 1, \"a\")\nexempleTuple[1] # avec un index mais pas modifiable\n# exempleTuple[0] = \"test\" # mais pas modifiable\n```\n2\n\n```{.python}\n# sets : comme liste et tuple mais pas d'index l'avantage est qu'il n'affiche que les valeur unique\nensembleSet = {1, 3, 90, \"test\", 3}\nprint(ensembleSet)\n```\n{1, 90, 3, 'test'}\n\n```{.python}\n# utile pour comparer deux sets.\nset1 = {2, 3, 5, 80, 23}\nset2 = {1, 2, 3, 10, 80}\nprint(set1 | set2) # unique en combinant les deux sets\nprint(set1 & set2) # présent dans les deux\nprint(set1 - set2) # ce qui ne matche pas entre les deux sets\nprint(set1 ^ set2) # unique dans l'un ou l'autre\n```\n{1, 2, 3, 5, 10, 80, 23}\n{80, 2, 3}\n{5, 23}\n{1, 5, 23, 10}\n\n```{.python}\n# dictionnaires\n# clé/valeur\ndico = {'nom': 'Dorian', 'age': 26 , 'pates préférées' : 'Carbonara'}\ntype(dico)\n```\ndict\n\n```{.python}\ndico.keys()\n```\ndict_keys(['nom', 'age', 'pates préférées'])\n\n\n```{.python}\ndico.values()\n```\ndict_values(['Dorian', 26, 'Carbonara'])\n\n```{.python}\ndico.items()\n```\ndict_items([('nom', 'Dorian'), ('age', 26), ('pates préférées', 'Carbonara')])\n\n```{.python}\ndico['nom'] # index par la clef\n```\n'Dorian'\n\n```{.python}\ndico['nom'] = \"Michel\"\ndico\n```\n{'nom': 'Michel', 'age': 26, 'pates préférées': 'Carbonara'}\n\n```{.python}\ndico.update({'nom': 'Dorian', 'age': 26 , 'poids' : '70kg'})\ndico\n```\n{'nom': 'Dorian', 'age': 26, 'pates préférées': 'Carbonara', 'poids': '70kg'}\n\n```{.python}\ndel dico['poids']\ndico\n```\n{'nom': 'Dorian', 'age': 26, 'pates préférées': 'Carbonara'}\n\n```{.python}\nvar  = 2\nprint(isinstance(var, int))\n```\nTrue\n\n\n",
    "supporting": [
      "types_files"
    ],
    "filters": [],
    "includes": {}
  }
}